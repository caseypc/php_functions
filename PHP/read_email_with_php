<?php
require_once(ROOT.'/app/config/config.php');// Load config file
require_once(ROOT.'/app/core/functions.php');// Load helper functions

require_once(ROOT.'/app/routes.php');// Load routes
require_once(ROOT.'/app/core/db-mysql.php');// Load DB (mysql)
require_once(ROOT.'/app/core/db-mssql.php');// Load DB (mssql)
require_once(ROOT.'/app/core/PHPMailer/PHPMailerAutoload.php');// Load PHPMailer

$hostname = '{192.168.0.30:993/imap/ssl/novalidate-cert}INBOX';
$username = 'msupport@genesishealthclub.com';
$password = 'xxxxxxxxxxxx';

/* try to connect */
$inbox = @imap_open($hostname,$username,$password, 0, 0, array('DISABLE_AUTHENTICATOR' => 'GSSAPI')) or die('Cannot connect: ' . imap_last_error());

/* grab emails */
$email_count = imap_search($inbox,'ALL');

$msg_cnt = imap_num_msg($inbox);

debug($email_count);
debug($msg_cnt);

/* grab emails */
$emails = imap_search($inbox,'ALL');

/* if emails are returned, cycle through each... */
if($emails) {
	
	// /* begin output var */
	// $output = '';
	
	// /* put the newest emails on top */
	// rsort($emails);
	
	// /* for every email... */
	// foreach($emails as $email_number) {
		
	// 	/* get information specific to this email */
	// 	$overview = imap_fetch_overview($inbox,$email_number,0);
	// 	$message = imap_fetchbody($inbox,$email_number,2);
		
	// 	 output the email header information 
	// 	$output.= 'Status: '.($overview[0]->seen ? 'read' : 'unread').'<br>';
	// 	$output.= 'Subject: '.$overview[0]->subject.'<br> ';
	// 	$output.= 'From: '.$overview[0]->from.'<br>';
	// 	$output.= 'Date: '.$overview[0]->date.'<br>';
		
	// 	/* output the email body */
	// 	$output.= 'Message: '.$message.'<br>';
	// }
	
	// echo $output;

	$in = array();
	$x = 0;
	for($i = 1; $i <= $msg_cnt; $i++) {
		$in[] = array(
			'index'     => $i,
			'header'    => imap_headerinfo($inbox, $i),
			'body'      => imap_body($inbox, $i),
			// 'structure' => imap_fetchstructure($inbox, $i)
		);
		echo 'Date: '.$in[$x]['header']->date.'<br>';
		echo 'Date: '.date("F j, Y, g:i a", $in[$x]['header']->udate).'<br>';
		echo 'Subject: '.$in[$x]['header']->subject.'<br>';
		echo 'From address (complete): '.$in[$x]['header']->fromaddress.'<br>';
		echo 'From name: '.$in[$x]['header']->from[0]->personal.'<br>';
		echo 'From mailbox: '.$in[$x]['header']->from[0]->mailbox.'<br>';
		echo 'From host: '.$in[$x]['header']->from[0]->host.'<br>';
		// echo 'Msg: '.strip_tags($in[$x]['body']).'<br><br><br>';
		echo 'Msg: '.$in[$x]['body'].'<br><br><br>';

		// Parse subject line and look for [MTICKET: xxx] phrase
		preg_match('#\[MTICKET: (.*)\]#siu', $in[$x]['header']->subject, $matches);

		debug($matches);

		if (count($matches) == 2) {// Only perform if we found a match
			if (is_numeric($matches[1])) {// we have a ticket number
				// Select ticket by id - to ensure is valid and to get the existing msg
				$sql = "SELECT id, status, user, location_id, location_name, msg, assigned_account, assigned_name, assigned_email, created, updated, closed FROM `tickets` WHERE id = $matches[1]";
				$query = $db->prepare($sql);
				$query->execute();
				$ticket = $query->fetch();
				if ($query->rowCount() > 0) {// We have a valid ticket
					$ticket_msg = $ticket->msg;

					// Check for attachments
					$sql = "SELECT id, mime, ext, size, filename FROM `attachments` WHERE ticket_id = $matches[1]";
					$attachments_query = $db->prepare($sql);
					$attachments_query->execute();
					$sql_attachments = $attachments_query->fetchAll();
					// has attachments
					if ($attachments_query->rowCount() > 0) {// We have attachments
						$has_attachments = 'Yes';
					} else {
						$has_attachments = 'No';
					}

					// clean up email msg
					$msg_raw = $in[$x]['body'];
					// first check if the msg was sent from Outlook, cause MS doesn't care about standards and so we have to do stuff special for it. Thanks Microsoft.
					preg_match('#xmlns:v="urn:schemas-microsoft-com:vml"#siu', $msg_raw, $m);
					if (count($m) > 0) {// it's from Outlook, no chunk_split, so skip that part
						$msg = $msg_raw;
					} else {
						$msg = '';
						$msg_parts = explode("\n", $msg_raw);
						foreach ($msg_parts as &$msg_line) {
							if (strlen($msg_line) > 76) {
								$msg .= substr($msg_line, 0, 75);
							} else {
								$msg .= $msg_line;
							}
						}
					}
					/*
					$msg = preg_replace('#<style[^>]*?>.*?</style>#siu', '$1', $msg);// Remove CSS first
					*/
					// $msg = strip_tags($msg);// Strip all tags
					echo 'Msg11: '.$msg.'<br><br><br>';

					// Setup ticket log messages
					$ticket_log_msg = '';
					$ticket_log_msg .= "\r\n\r\n---------- Ticket updated on ".date('F j, Y, g:i a')." by ".$in[$x]['header']->from[0]->mailbox." ----------\r\n";
					$ticket_log_msg .= "---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------\r\n\r\n\r\n\r\n";

					$msg = $msg.nl2br($ticket_log_msg).$ticket_msg;
					$msg_slashes = addslashes($msg.nl2br($ticket_log_msg).$ticket_msg);


					// try to append email to ticket msg
					$sql = "UPDATE `tickets` SET msg = '$msg_slashes' WHERE id = $matches[1]";
					debug($sql);
					$query = $db->prepare($sql);
					if ($query->execute()) {// update worked
						
						// Move the email message to a new folder
						echo 'ATTEMPTING TO MOVE EMAIL ID '.$i.' with subject: '.$in[$x]['header']->subject.'<br><br>';
						imap_mail_move($inbox, $i, 'INBOX/Processed');// move on server
						imap_expunge($inbox);

						// Send emails
						// Send email to Requester and assignee
						if (!empty($ticket->assigned_email)) {// Send email to Requester and assignee
							debug('1111111');
							$recipient = $ticket->user.'@genesishealthclubs.com';
							$body = $cfg['EMAIL_HEADER'].'<table border="0" cellpadding="0" cellspacing="0" class="btn btn-primary"><tbody><tr><td align="left"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><a href="http://mtickets.genesishealthclub.com/admin/tickets/view/?id='.$ticket->id.'" target="_blank">View Support Ticket</a></td></tr></tbody></table></td></tr></tbody></table><br><strong>Ticket ID:</strong> '.$ticket->id.'<br><strong>Status:</strong> '.$ticket->status.'<br><strong>Assigned To:</strong> '.$ticket->assigned_name.'<br><strong>Location:</strong> '.$ticket->location_name.'<br><strong>Attachments:</strong> '.$has_attachments.'<br><strong>Message:</strong> '.htmlspecialchars_decode($msg).$cfg['EMAIL_FOOTER'];
							// $mail_sent = sendEmail($cfg, $recipient, $cfg['EMAIL_FROM'], $cfg['EMAIL_FROM_NAME'], '[MTICKET: '.$ticket->id.'] - Updated Ticket', $body);

							$recipient = $ticket->assigned_email;
							$body = $cfg['EMAIL_HEADER'].'<table border="0" cellpadding="0" cellspacing="0" class="btn btn-primary"><tbody><tr><td align="left"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><a href="http://mtickets.genesishealthclub.com/admin/tickets/view/?id='.$ticket->id.'" target="_blank">View Support Ticket</a></td></tr></tbody></table></td></tr></tbody></table><br><strong>Ticket ID:</strong> '.$ticket->id.'<br><strong>Status:</strong> '.$ticket->status.'<br><strong>Assigned To:</strong> '.$ticket->assigned_name.'<br><strong>Location:</strong> '.$ticket->location_name.'<br><strong>Attachments:</strong> '.$has_attachments.'<br><strong>Message:</strong> '.htmlspecialchars_decode($msg).$cfg['EMAIL_FOOTER'];
							// $mail_sent = sendEmail($cfg, $recipient, $cfg['EMAIL_FROM'], $cfg['EMAIL_FROM_NAME'], '[MTICKET: '.$ticket->id.'] - Updated Ticket', $body);
						} else {// Send email to requester only
							debug('2222222222');
							$assigned_to = 'Unassigned';
							$recipient = $ticket->user.'@genesishealthclubs.com';
							$body = $cfg['EMAIL_HEADER'].'<table border="0" cellpadding="0" cellspacing="0" class="btn btn-primary"><tbody><tr><td align="left"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><a href="http://mtickets.genesishealthclub.com/admin/tickets/view/?id='.$ticket->id.'" target="_blank">View Support Ticket</a></td></tr></tbody></table></td></tr></tbody></table><br><strong>Ticket ID:</strong> '.$ticket->id.'<br><strong>Status:</strong> '.$ticket->status.'<br><strong>Assigned To:</strong> '.$assigned_to.'<br><strong>Location:</strong> '.$ticket->location_name.'<br><strong>Attachments:</strong> '.$has_attachments.'<br><strong>Message:</strong> '.htmlspecialchars_decode($msg).$cfg['EMAIL_FOOTER'];
							// $mail_sent = sendEmail($cfg, $recipient, $cfg['EMAIL_FROM'], $cfg['EMAIL_FROM_NAME'], '[MTICKET: '.$ticket->id.'] - Updated Ticket', $body);
						}
					}
				}
			} else {// check for valid commands
				// CMD - Create
				// CMD - Close
				// CMD - Delete
			}
		} else {// No [MTICKET in subject line
			debug('33333333');
			// Move the email message to another folder
			// echo 'Moving EMAIL ID '.$i.' with subject: '.$in[$x]['header']->subject.'<br><br>';
			// imap_mail_move($inbox, $i, 'INBOX/Other');// move on server
			// imap_expunge($inbox);

			// Create ticket

			// clean up email msg
			$msg_raw = $in[$x]['body'];
			// first check if the msg was sent from Outlook, cause MS doesn't care about standards and so we have to do stuff special for it. Thanks Microsoft.
			preg_match('#xmlns:v="urn:schemas-microsoft-com:vml"#siu', $msg_raw, $m);
			if (count($m) > 0) {// it's from Outlook, no chunk_split, so skip that part
				$msg = $msg_raw;
			} else {
				$msg = '';
				$msg_parts = explode("\n", $msg_raw);
				foreach ($msg_parts as &$msg_line) {
					if (strlen($msg_line) > 76) {
						$msg .= substr($msg_line, 0, 75);
					} else {
						$msg .= $msg_line;
					}
				}
			}
			// echo 'Msg11: '.$msg.'<br><br><br>';
			$msg_slashes = addslashes($msg);


			$requester = $in[$x]['header']->from[0]->mailbox;

			$assigned_to = 'Unassigned';
			$sql = "INSERT INTO `tickets` (status, user, location_id, location_name, msg) VALUES ('OPEN', '$requester', '', '', '$msg_slashes')";
			$query = $db->prepare($sql);
			$query->execute();
		}

		$x++;// the last thing
	}

	// echo 'IN ARR: <pre>';
	// var_dump($in);
	// echo '</pre><br><br>';

	// $list = imap_list($inbox, "{192.168.0.30:993/imap/ssl/novalidate-cert}", "*");

	// echo 'LIST: <pre>';
	// var_dump($list);
	// echo '</pre><br><br>';

	echo 'RAW MSG: <br>';
	debug($msg_raw);
} 

/* close the connection */
imap_close($inbox);
